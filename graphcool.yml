types: ./types.graphql

functions:

  signup:
    type: resolver
    schema: src/email-password/signup.graphql
    handler:
      code: src/email-password/signup.ts

  authenticate:
    type: resolver
    schema: src/email-password/authenticate.graphql
    handler:
      code: src/email-password/authenticate.ts

  loggedInUser:
    type: resolver
    schema: src/email-password/loggedInUser.graphql
    handler:
      code: src/email-password/loggedInUser.ts

permissions:
  # You can NOT create a user.  Forcing people to use the resolvers
  # NOTE: this is commented out just for clarity and "completion" of the CRUD
  # - operation: User.create

  # You can only read your user information
  - operation: User.read
    authenticated: true
    query: src/permissions/User.graphql:isCurrentUser
    fields:
      - id
      - createdAt
      - updatedAt
      - email

  # You can only update your user information
  # NOTE: there is currnetly nothing for the user to update.
  # TODO: add the ability to update email and password through some fancy
  # resolvers.
  # - operation: User.update
  #   authenticated: true
  #   query: src/permissions/User.graphql:isCurrentUser

  # You can only delete yourself
  - operation: User.delete
    authenticated: true
    query: src/permissions/User.graphql:isCurrentUser

  # You can only connect a list to a user if setting yourself as the owner
  - operation: UserLists.connect
    authenticated: true
    query: src/permissions/UserLists.graphql:isUserNewOwner

  # You can only disconnect a list to a user if you are the owner of the list
  - operation: UserLists.disconnect
    authenticated: true
    query: src/permissions/UserLists.graphql:isUserOwner

  # Everyone can create a list
  - operation: List.create

  # Everyone can read public lists
  - operation: List.read
    query: src/permissions/List.graphql:isPublic

  # You can read lists that you own
  - operation: List.read
    authenticated: true
    query: src/permissions/List.graphql:isUserOwner

  # Everyone can update a public list
  # NOTE: Update permisions only deal with non-relation fields.
  # NOTE: if an updateList is called with only a ownerId (you are just
  # trying to make a relation), then it will not be permitted.  Intead use
  # addToUserLists... OR just modify a scalar field (aka name) as well and it
  # will work. Curiously, removing a user works just fine when owner: null
  # is passed to updateList.
  # NOTE: the above is just the way graphcool works at the moment.  Probably
  # a bug because ownerId is passed to update and kind of "looks" like it needs
  # to pass permissions for the list update when really it is a short cut to
  # connecting a relationship and should then thus be permitted by the above
  # UsersLists.connect
  - operation: List.update
    query: src/permissions/List.graphql:isPublic

  # You can update a list that you own
  - operation: List.update
    authenticated: true
    query: src/permissions/List.graphql:isUserOwner

  # Everyone can delete a public list
  - operation: List.delete
    query: src/permissions/List.graphql:isPublic

  # You can delete a list you own
  - operation: List.delete
    authenticated: true
    query: src/permissions/List.graphql:isUserOwner

  # Everyone can connect a todo to a public list
  - operation: ListTodos.connect
    query: src/permissions/ListTodos.graphql:isListPublic

  # You can connect a todo to a list you own
  - operation: ListTodos.connect
    authenticated: true
    query: src/permissions/ListTodos.graphql:isUserOwner

  # Everyone can disconnect a todo from a list if the list is public
  - operation: ListTodos.disconnect
    query: src/permissions/ListTodos.graphql:isListPublic

  # You can disconnect a todo from a list if you own the list
  - operation: ListTodos.disconnect
    authenticated: true
    query: src/permissions/ListTodos.graphql:isUserOwner

  # Everyone can create a todo
  - operation: Todo.create

  # Everyone can read public todos
  - operation: Todo.read
    query: src/permissions/Todo.graphql:isPublic

  # You can read todos that are part of lists you own
  - operation: Todo.read
    authenticated: true
    query: src/permissions/Todo.graphql:isUserOwner

  # Everyone can update a todo if it is public
  - operation: Todo.update
    query: src/permissions/Todo.graphql:isPublic

  # You can update a todo if you are the owner of the list it belongs to
  - operation: Todo.update
    authenticated: true
    query: src/permissions/Todo.graphql:isUserOwner

  # Everyone can delete a todo that belongs to a public list
  - operation: Todo.delete
    query: src/permissions/Todo.graphql:isPublic

  # You can delte a todo if it belongs to a list you own
  - operation: Todo.delete
    authenticated: true
    query: src/permissions/Todo.graphql:isUserOwner

rootTokens:
- mytoken
